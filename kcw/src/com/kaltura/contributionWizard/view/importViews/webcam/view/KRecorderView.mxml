<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:VBox
	creationComplete="creationCompleteHandler()"
	width="100%" height="100%"
	horizontalAlign="center" verticalAlign="middle"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="com.kaltura.contributionWizard.view.importViews.webcam.view.*"
	xmlns:controler="com.kaltura.contributionWizard.view.importViews.webcam.controler.*"
	xmlns:importees="com.kaltura.vo.importees.*" xmlns:spinner="com.grakl.spinner.*" xmlns:code="http://code.google.com/p/flexlib/">

    <importees:ImportFileVO id="importItemVo"
    	fileName="{_webcamModel.streamName}"
    	fileExtension="file.flv"
    	mediaTypeCode="{WizardModelLocator.getInstance().mediaProviders.activeMediaProvider.mediaInfo.mediaCode}"
    	mediaProviderCode="{WizardModelLocator.getInstance().mediaProviders.activeMediaProvider.providerCode}" />

	<mx:Script>

        <![CDATA[
        	import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
        	import com.arc90.modular.CairngormEventDispatcherFactory;
        	import com.grakl.spinner.Spinner;
        	import com.kaltura.contributionWizard.command.webcam.PickStreamNameCommand;
        	import com.kaltura.contributionWizard.events.ImportEvent;
        	import com.kaltura.contributionWizard.events.webcam.WebcamEvent;
        	import com.kaltura.contributionWizard.model.WebcamModelLocator;
        	import com.kaltura.contributionWizard.model.WizardModelLocator;
        	import com.kaltura.contributionWizard.view.events.ImportViewCompleteEvent;
        	import com.kaltura.contributionWizard.view.importViews.webcam.controler.VideoRecorder;
        	import com.kaltura.contributionWizard.view.importViews.webcam.events.RecorderControlEvent;
        	import com.kaltura.contributionWizard.view.importViews.webcam.events.RecorderEvent;
        	import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
        	import com.kaltura.preloaders.KmcPreloader;
        	import com.kaltura.vo.importees.ImportFileVO;
        	
        	import mx.controls.Alert;
        	import mx.controls.Spacer;
        	import mx.core.Application;
        	import mx.events.ListEvent;
        	import mx.managers.PopUpManager;
        	import mx.rpc.events.ResultEvent;
        	import mx.utils.UIDUtil;

			private static const WEB_CAM_NAME:String = "webCamName";

    		[Bindable]
    		private var _webcamModel:WebcamModelLocator = WebcamModelLocator.getInstance();
    		[Bindable]
    		private var _wizardModel:WizardModelLocator = WizardModelLocator.getInstance();
    		private var _wizardDispatcher:CairngormEventDispatcher = CairngormEventDispatcher.getInstance();
    		//private var vr:VideoRecorder;

			[Bindable]
			private var _publishing:Boolean = false;
			
			[Bindable]
			private var _buffering:Boolean = false;

    		public function init():void
    		{
				//GlobalData.setLoader(true,this);
				//var red5Path:String = "rtmp://kaldev.kaltura.com/oflaDemo";//"rtmp://" + GlobalData.stripDomain + GlobalData.RED5_APP_PATH;
				//vr = new VideoRecorder(red5Path, "100");

				vr.addEventListener(RecorderEvent.RECORD_START,						startRecordHandler);
				vr.addEventListener(RecorderEvent.PLAYBACK_START,					startPlayPlayback);
				vr.addEventListener(RecorderEvent.PLAYBACK_STOP,					stopPlayHandler);
				vr.addEventListener(RecorderEvent.STREAM_END,						streamEndHandler);
				vr.addEventListener(RecorderEvent.RECORDER_READY,					recorderReadyHandler);
				vr.addEventListener(RecorderEvent.STREAMED_BUFFER_EMPTY,			outStreamBufferEmptyHandler);
				vr.addEventListener(RecorderEvent.STREAMED_PLAYBACK_BUFFER_EMPTY,	inStreamBufferEmptyHandler);
				vr.addEventListener(RecorderEvent.STREAMED_PLAYBACK_BUFFER_FULL,	inStreamBufferFullHandler);
				vr.addEventListener(RecorderEvent.CAMERA_STATUS,					cameraStatusHandler);
				vr.addEventListener(RecorderEvent.CAMERA_READY,						cameraReadyHandler);
				vr.addEventListener(RecorderEvent.RECORD_FINISH,					recordFinishHandler);
                vr.init(); 
                tips.init();
                recorder_control.init();

                //vr.videoWidth = 200;
                //vr.videoHeight = 200;
				//vidContainer.addChild(vr);
    		}

    		public function addEntry(fromTime:Number,toTime:Number):void
			{
				/* var params:Object = GlobalData.createParamsObject();
		    	params.media_source = GlobalData.ENTRY_MEDIA_SOURCE_WEBCAM;
			    params.media_type = GlobalData.ENTRY_MEDIA_TYPE_VIDEO;
			    params.media_data = "data.flv";
			    params.media_name = GlobalData.currentUser.name;
			    params.from_time = int(fromTime * 1000);
			    params.to_time = int(toTime * 1000);
		        //GlobalData.setLoader(true,this);
		    	app.srvHelper.kalturaService("addentry",params,addentrySrv); */
			}

			public function entryAdded(event:ResultEvent):void
			{
				//app.srvHelper.mediaAddedHandler(new MediaEvent(MediaEvent.MEDIA_ADDED,event,true));
				//app.srvHelper.enteryAdded(event);
				//removeMe();
			}

    		public function deactivate():void
    		{
    			vr.dispose();
    		}

			///////////////////////////////////////////////////////////////////////
			//Recorder Handler
			///////////////////////////////////////////////////////////////////////

    		public function recordFinishHandler(event:RecorderEvent):void
    		{
    			// trace("recordFinishHandler");
    			//GlobalData.setLoader(false,vr);
    			recorder_control.currentState = "play_state";
				//importItemVo.thumbURL = _wizardModel.context.protocol + _wizardModel.context.hostName + "/content/uploads/thumbnail/thumb_"+importItemVo.fileName+"_.jpg";	
    			dispatchAddImportItemVo();
				_publishing = false;
    			//tips.setState(4);
    		}

    		public function outStreamBufferEmptyHandler(event:RecorderEvent):void
    		{
    			// trace("outStreamBufferEmptyHandler");
    			recorder_control.maxSliderValue = event.time;
				vr.stopRecording();
    		}

    		public function startRecordHandler(event:RecorderEvent):void
    		{
    			// trace("startRecordHandler");
    			//GlobalData.setLoader(false,vr);
    			recorder_control.currentState = "from_record_stop_state";
    			//recorder_control.startTimer();
    			tips.setState(3);
    		}

    		public function stopPlayHandler(event:RecorderEvent):void
    		{
    			// trace("current state changing to playState");
    			//GlobalData.setLoader(false,vr);
				recorder_control.currentState = "play_state";
				//tips.setState(4);
    		}

    		public function streamEndHandler(event:RecorderEvent):void
    		{
    			// trace("streamEndHandler");
    			//GlobalData.setLoader(false,vr);
    			recorder_control.currentState = "play_state";
    		}

    		public function recorderReadyHandler(event:RecorderEvent):void
    		{
    			// trace("recorderReadyHandler");
    			recorder_control.currentState = "record_state";
    			tips.setState(2);
    		}

    		public function cameraReadyHandler(event:RecorderEvent):void
    		{
    			// trace("cameraReadyHandler");
    			//GlobalData.setLoader(false,vr);
    			tips.setState(2);
				recorder_control.enableRecordBtn = true;
    		}

    		public function cameraStatusHandler(event:RecorderEvent):void
    		{
    			// trace("cameraStatusHandler");
    			//GlobalData.setLoader(false,vr);
    		}

    		public function startPlayPlayback(event:RecorderEvent):void
    		{
    			// trace("startPlayPlayback");
				_buffering = true;
				tips.setState(5);
    		}

			///////////////////////////////////////////////////////////////////////
			//Recorder Controll Handler
			///////////////////////////////////////////////////////////////////////
			public function onPlayStartPress(event:RecorderControlEvent):void
			{
				// trace("onPlayStartPress");
				vr.playBack(event.minTime,event.maxTime);
				recorder_control.currentState = "from_play_stop_state";
			}

			public function onPlayStopPress(event:RecorderControlEvent):void
			{
				// trace("onPlayStopPress");
				//GlobalData.setLoader(true,vr);
				vr.stopPlayBack();
				stopPlayHandler(null);
			}

			public function onStartRecordPress(event:RecorderControlEvent):void
			{
				// trace("onStartRecordPress");
				//GlobalData.setLoader(true,vr);
				var evtPickStreamName:WebcamEvent = new WebcamEvent(WebcamEvent.PICK_STREAM_NAME);
				CairngormEventDispatcherFactory.getDispatcher(this).dispatchEvent(evtPickStreamName);
				dispatchRemoveImportItem();
				vr.record();
			}

			public function onStopRecordPress(event:RecorderControlEvent):void
			{
				// trace("onStopRecordPress");
				//GlobalData.setLoader(true,vr);
				_publishing = true;
				vr.stopRecordingAddWait();
			}

			/* public function onCancelRecordPress(event:RecorderControlEvent):void
			{
				// trace("onCancelRecordPress");
				vr.loadOutStream();
			} */

			public function onSaveRecordPress(evtSaveRecord:RecorderControlEvent):void
			{
				// trace("1");
				var clipLength:Number = evtSaveRecord.maxTime - evtSaveRecord.minTime;

				/* if (clipLength < KRecorderView.MIN_RECORD_TIME)
				{
					Alert.show("Sorry, less than three seconds recording time is not allowed.");
					return;
				} */
				//GlobalData.setLoader(false,vr);
				recorder_control.currentState = "record_state";
				//recorder_control.visible = false;
				//isVideoExist = false;
				//addEntry(evtSaveRecord.minTime, evtSaveRecord.maxTime);

			}

    		//getter & setters
    		////////////////////////////////////////////
    		public function get recorder():VideoRecorder
    		{
    			return vr;
    		}

    		private function dispatchAddImportItemVo():void
    		{
    			var event:ImportEvent = new ImportEvent(ImportEvent.ADD_IMPORT_ITEM, importItemVo);
    			_wizardDispatcher.dispatchEvent(event);
    		}

    		private function dispatchRemoveImportItem():void
    		{
    			var event:ImportEvent = new ImportEvent(ImportEvent.REMOVE_IMPORT_ITEM, importItemVo);
    			_wizardDispatcher.dispatchEvent(event);
    		}

			[Bindable]
			private var _names:Array;

			private var _selectedCamera:Camera;

			private var _muted:Boolean = true;
			private var _firstTimeSelecting:Boolean = true;

			private function creationCompleteHandler():void
			{
				_names = Camera.names;
				combo.dataProvider = _names;

				combo.selectedItem = _webcamModel.savedCameraNameLso.getData()[WEB_CAM_NAME];
				comboChangeHandler();
				
				videoCanvas.visible = true;
			}

			private function comboChangeHandler():void
			{
				var selectedIndex:int = combo.selectedIndex;
				if (selectedIndex != -1)
				{
					var cameraAlias:String = selectedIndex.toString();
					selectCamera(cameraAlias);

					_webcamModel.savedCameraNameLso.getData()[WEB_CAM_NAME] = combo.selectedLabel;
					_webcamModel.savedCameraNameLso.flush();
				}
			}

			private function selectCamera(cameraAlias:String):void
			{
				_selectedCamera = Camera.getCamera(cameraAlias);

				_selectedCamera.addEventListener(StatusEvent.STATUS, 		statusHandler);
				_selectedCamera.addEventListener(ActivityEvent.ACTIVITY, 	activityHandler);

				vr.setCamera(_selectedCamera);

				if (_muted && !_firstTimeSelecting)
				{
					_firstTimeSelecting = false;
					Security.showSettings(SecurityPanel.PRIVACY);
				}
			}

			private function statusHandler(statusEvent:StatusEvent):void
			{
				_firstTimeSelecting = false;
				if (statusEvent.code == "Camera.Unmuted")
				{
					_muted = false;
				}
				else if (statusEvent.code == "Camera.Muted")
				{
					_muted = true;
				}
			}

			private function activityHandler(event:ActivityEvent):void
			{
				//trace(event, Camera(event.target).activityLevel)
			}


			private function inStreamBufferEmptyHandler(event:RecorderEvent):void
			{
				_buffering = true;
			}
			
			private function inStreamBufferFullHandler(event:RecorderEvent):void
			{
				_buffering = false;
			}
			
		]]>
	</mx:Script>

	<!--Visible content-->
    <mx:HBox verticalAlign="middle" width="100%" height="100%">

		<mx:VBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="left">
			<mx:ComboBox id="combo"
				dataProvider="{_names}"
				prompt="{resourceManager.getString(ResourceBundleNames.WEBCAM_VIEW, 'SELECT_WEBCAM')}"
				change="comboChangeHandler()" />
		    <view:RecorderDetailView id="tips" width="100%" verticalAlign="middle" />
		</mx:VBox>

		<mx:VBox width="100%" height="100%" horizontalAlign="center">
			<mx:Canvas id="videoCanvas" width="100%" height="100%" visible="false" styleName="videoRecorderCanvas"  
					   verticalScrollPolicy="off" horizontalScrollPolicy="off">
			    <controler:VideoRecorder id="vr"
			    	horizontalAlign="center" verticalAlign="middle"
			    	videoURL="{_wizardModel.mediaProviders.activeMediaProvider.customData.serverUrl}"
			    	streamName="{_webcamModel.streamName}"
			    	width="100%" height="100%"/>
			    	
			    <spinner:Spinner visible="{_publishing || _buffering}" x="{vr.contentMouseX}" y="{vr.contentMouseY}" />
			</mx:Canvas>

			<view:RecorderEditorControl id="recorder_control" width="100%" verticalAlign="middle"
				visible="{!_webcamModel.detectingCamera}"
		    	playStart="onPlayStartPress(event)" 		playStop="onPlayStopPress(event)"
		    	startRecord="onStartRecordPress(event)" 	stopRecord="onStopRecordPress(event)" />
		</mx:VBox>
    </mx:HBox>
</mx:VBox>
