<?xml version="1.0" encoding="utf-8"?>
<!--/*
This file is part of the Kaltura Collaborative Media Suite which allows users
to do with audio, video, and animation what Wiki platfroms allow them to do with
text.

Copyright (C) 2006-2008  Kaltura Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

@ignore
*/
-->
<mx:HBox
	verticalAlign="middle"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:vo="com.kaltura.vo.*" creationComplete="setCategory()">
	<mx:Metadata>
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.kaltura.contributionWizard.events.ValidateAllMetaDataEvent;
			import com.kaltura.contributionWizard.events.TaggingEvent;
			import com.kaltura.types.KalturaSourceType;
			import mx.binding.utils.BindingUtils;
			import com.kaltura.vo.KalturaCategory;
			import mx.collections.ArrayCollection;
			import com.kaltura.contributionWizard.view.events.TaggingViewEvent;
			import com.kaltura.vo.MediaMetaDataVO;
			import com.kaltura.vo.importees.ImportURLVO;
			import com.kaltura.contributionWizard.view.resources.ResourceBundleNames;
			import com.kaltura.contributionWizard.model.WizardModelLocator;
			import mx.controls.Alert;
			import com.kaltura.vo.importees.ImportFileVO;
			import com.kaltura.vo.importees.BaseImportVO;
			import com.adobe_cw.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.kaltura.contributionWizard.model.importTypesConfiguration.tagging.TaggingConfig;
			
			[Bindable]
			public var taggingConfig:TaggingConfig;
			
			[Bindable]
			private var _model:WizardModelLocator = WizardModelLocator.getInstance();

			[Bindable]
			private var _metaDataVo:MediaMetaDataVO;

			[Bindable]
			private var _importItemVo:BaseImportVO;
			
			[Bindable]
			public var _categoriesList:ArrayCollection;		
			
			//string represantation for the category, initialized with a prefix that describes location in tree
			[Bindable]
			private var _categoryName:String;
		
 			public override function set data(value:Object):void
			{
				_importItemVo = BaseImportVO(value);
				if (_importItemVo) {
					_metaDataVo = _importItemVo.metaData;
				}
				
				super.data = value;		
			}
			
			/**
			 * if user provided categoriesRootId then the category of every content should be set to be
			 * under the given root Id. even if no categories were selected.
			 * */
			private function setCategory():void {
				if( _model.categoriesPrefix) 
					_categoryName = _model.categoriesPrefix.substr(0, _model.categoriesPrefix.length-1);
				else
					BindingUtils.bindSetter( getCategoriesPrefix , _model , "categoriesPrefix");
			}
			
			private function getCategoriesPrefix( categoriesPrefix : String) : void
			{
				if (categoriesPrefix)
				{
					//removes last ">" from string
					_categoryName = categoriesPrefix.substr(0, _model.categoriesPrefix.length-1);
					dispatchEvent(new TaggingViewEvent(TaggingViewEvent.CATEGORY_CHANGED , _metaDataVo, inputMetaData));
				}
			}
/*
			private function titleChangeHandler():void
			{
				//dispatchEvent(new TaggingViewEvent(TaggingViewEvent.TITLE_CHANGED, _metaDataVo, inputMetaData));
				dispatchSetMediaMetaData(inputMetaData, _metaDataVo);
			}

			private function tagsChangeHandler():void
			{
				dispatchSetMediaMetaData(inputMetaData, _metaDataVo);
				//dispatchEvent(new TaggingViewEvent(TaggingViewEvent.TAGS_CHANGED, _metaDataVo, inputMetaData));
			}
	
			private function descriptionChangeHandler():void
			{
				dispatchSetMediaMetaData(inputMetaData, _metaDataVo);
				//dispatchEvent(new TaggingViewEvent(TaggingViewEvent.DESCRIPTION_CHANGED , _metaDataVo, inputMetaData));
			}
			private function additionalChangeHandler():void
			{
				dispatchSetMediaMetaData(inputMetaData, _metaDataVo);
				//dispatchEvent(new TaggingViewEvent(TaggingViewEvent.ADDITIONAL_CHANGED , _metaDataVo, inputMetaData));
			}
			*/
			private function categoryChangeHandler():void
			{
				_categoryName = _model.categoriesPrefix +  KalturaCategory(_model.categoriesFromRoot.getItemAt(categoryCB.selectedIndex)).name;	
				_metaDataVo.categoryIndex = categoryCB.selectedIndex;
				dispatchSetMediaMetaData(inputMetaData, _metaDataVo);
				//dispatchEvent(new TaggingViewEvent(TaggingViewEvent.CATEGORY_CHANGED , _metaDataVo, inputMetaData));
			}
			
			private function dataChangedHandler() :void {
				dispatchSetMediaMetaData(inputMetaData, _metaDataVo);
			}
			
			private function dispatchSetMediaMetaData(newMetaData:MediaMetaDataVO, oldMetaData:MediaMetaDataVO):void
			{
				var evtTagging:TaggingEvent = new TaggingEvent(TaggingEvent.SET_MEDIA_META_DATA, newMetaData, oldMetaData);
				CairngormEventDispatcher.getInstance().dispatchEvent(evtTagging);
			}
			public function validateMetaData():void
			{
				var validateAllEvent:ValidateAllMetaDataEvent = new ValidateAllMetaDataEvent(ValidateAllMetaDataEvent.VALIDATE_ALL_META_DATA, titleValidator, tagsValidator);
				validateAllEvent.dispatch();
			}

		]]>
	</mx:Script>

	<vo:MediaMetaDataVO id="inputMetaData" title="{titleInput.text}" tags="{tagsInput.text}" 
		description="{descriptionInput.text}" category="{_categoryName}" partnerData="{additionalInput.text}"/>
	

	<mx:Form width="100%">
		<mx:FormItem label="{resourceManager.getString(ResourceBundleNames.TAGGING, 'METADATA_TITLE')}" width="100%">
			<mx:TextInput id="titleInput"
				change="dataChangedHandler()"
				errorString="{_metaDataVo.titleErrorString}"
				focusIn="dataChangedHandler()"
				focusOut="dataChangedHandler()"
				text="{_metaDataVo.title}"
				width="100%"/>
		</mx:FormItem>

		<mx:FormItem label="{resourceManager.getString(ResourceBundleNames.TAGGING, 'METADATA_TAGS')}" width="100%"
			visible="{_model.startupDefaults.showTags}" includeInLayout="{_model.startupDefaults.showTags}">
			<mx:TextInput id="tagsInput"
				errorString="{_metaDataVo.tagsErrorString}"
				focusIn="dataChangedHandler()"
				focusOut="dataChangedHandler()"
				change="dataChangedHandler()"
				text="{_metaDataVo.tags}"			
				width="100%"
				/> 
		</mx:FormItem>
		
		<mx:FormItem label="{resourceManager.getString(ResourceBundleNames.TAGGING, 'METADATA_CATEGORY')}" width="100%"
			visible="{_model.startupDefaults.showCategories}" includeInLayout="{_model.startupDefaults.showCategories}">
			<mx:ComboBox id="categoryCB"
				dataProvider="{_model.categoriesFromRoot}"
				selectedIndex="{_metaDataVo.categoryIndex}"
				labelField="name"
				change="categoryChangeHandler()"
				prompt="{resourceManager.getString(ResourceBundleNames.TAGGING, 'METADATA_NO_CATEGORY')}"
				width="100%"
				/>
		</mx:FormItem>
		
		<mx:FormItem label="{resourceManager.getString(ResourceBundleNames.TAGGING, 'METADATA_DESCRIPTION')}" width="100%"
			visible="{_model.startupDefaults.showDescription}" includeInLayout="{_model.startupDefaults.showDescription}">
			<mx:TextArea height="{titleInput.height*2}" id="descriptionInput"
				errorString=""
				focusIn="dataChangedHandler()"
				focusOut="dataChangedHandler()"
				change="dataChangedHandler()"
				text="{_metaDataVo.description}"
				width="100%"
				/>
		</mx:FormItem>
		
		<mx:FormItem label="{resourceManager.getString(ResourceBundleNames.TAGGING, _model.additionalField)}" width="100%" 
			visible="{(_model.additionalField)&amp;&amp;(resourceManager.getString(ResourceBundleNames.TAGGING, _model.additionalField))}" includeInLayout="{(_model.additionalField)&amp;&amp;(resourceManager.getString(ResourceBundleNames.TAGGING, _model.additionalField))}">
			<mx:TextInput id="additionalInput"
				errorString=""
				focusIn="dataChangedHandler()"
				focusOut="dataChangedHandler()"
				change="dataChangedHandler()"
				text="{_metaDataVo.partnerData}"
				width="100%"
				/>
		</mx:FormItem>
	</mx:Form>
	
	<mx:StringValidator id="titleValidator" minLength="{taggingConfig.minTitleLen}" maxLength="{taggingConfig.maxTitleLen}" required="{taggingConfig.minTitleLen > 0}"/>
	<mx:StringValidator id="tagsValidator" minLength="{taggingConfig.minTagsLen}" 	maxLength="{taggingConfig.maxTagsLen}" 	required="{taggingConfig.minTagsLen > 0}" />
</mx:HBox>